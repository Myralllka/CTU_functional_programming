#lang racket

(define (get-i i vec)
  (cond
    ((= i 1) (car vec))
    (else (get-i (- i 1) (cdr vec)))
    )
  )
(define (get-ij i j mat)
  (let ((row (get-i i mat)))
    (get-i j row)
    )
  )
(define (sq x)
  (* x x)
  )
(define (diag j mat)
  (define (sum-Ljk j k acc)
    (if (= k j)
        acc
        (sum-Ljk j (+ k 1) (+ acc (sq (cholesky j k mat)))))
    )
  (let ((ajj (get-ij j j mat))
        (sum (sum-Ljk j 1 0)))
    (sqrt (- ajj sum)))
  )
(define (off-diag i j mat)
  (define (sum-Lik-Ljk k acc)
    (if (= k j)
        acc
        (sum-Lik-Ljk (+ k 1) (+ acc (* (cholesky j k mat) (cholesky i k mat)))))
    )
  (let ((aij (get-ij i j mat))
        (sum (sum-Lik-Ljk 1 0)))
    (/ (- aij sum) (cholesky j j mat)))
  )
(define (cholesky i j mat)
  (cond
    ((< i j) 0)  ; above diagonal is zero since L is lower-triangular
    ((= i j) (diag i mat))
    (else (off-diag i j mat))
    )
  )
(define (generate-row i j row size mat)
  (cond
    ((> j size) row)
    (else (generate-row i (+ j 1) (append row (list (cholesky i j mat))) size mat))))
(define (generate-mat i L size mat)
  (let ((cols (length (car mat))))
    (if (> i size)
        L
        (generate-mat (+ i 1) (append L (list (generate-row i 1 '() cols mat))) size mat))))
(define (create_cholesky mat)
  (let ((size (length mat)))
    (generate-mat 1 '() size mat)))
(define mat '((4 12 -16) (12 37 -43) (-16 -43 98)))
